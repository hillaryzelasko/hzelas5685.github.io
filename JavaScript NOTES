const menu = {
_meal: '',

get mealToCheck() {
  if (typeof meal === 'string')
  {
return this._meal;
  }
  else
  {
console.log('ERROR!!')
  }
},

set mealToCheck(meal) {
  if (typeof meal === 'string')
  {
    this._meal = meal;
  }
  else 
  {
    console.log('Please enter the correct format.')
  }
},

_price: 0,
 
get priceCheck() { 
  if (typeof price === 'number')
  {
return this._price;
  }
  else
  {
console.log('ERROR!!')
  }
},

set priceCheck(price) {
  if (typeof price === 'number')
  {
    this._price = price;
  }
  else 
  {
    console.log('Please enter the correct format.')
  }
},

get todaysSpecial () {
  if(this._meal && this._price)
  {
    console.log(`Today\'s Special is ${this._meal} for $${this._price}!`)
  }
  else 
  {
    console.log('Meal or price was not set correctly!')
  }
}

}


let meal = menu._meal = 'Spaghetti';
let price = menu._price = 2;

menu.todaysSpecial










//CHECKS IF FUNCTION IS WORKING

const addTwo = num => {
  return num + 2;
}

const checkConsistentOutput = (func, val) => {
let checkA = val + 2; 
let checkB = func(val);
if(checkA = checkB)
{
  return checkA
}
else
{
  return 'inconsistent results'
}
}

console.log(checkConsistentOutput(addTwo, 5));

const addTwo = num => {
  return num + 2;
}

const checkConsistentOutput = (func, val) => {
let checkA = val + 2; 
let checkB = func(val);
if(checkA = checkB)
{
  return checkA
}
else
{
  return 'inconsistent results'
}
}

console.log(checkConsistentOutput(addTwo, 5));







// Introduction to Iterators // 
const artists = ['Picasso', 'Kahlo', 'Matisse', 'Utamaro'];

artists.forEach(artist => {
  console.log(artist + ' is one of my favorite artists.');
});

const numbers = [1, 2, 3, 4, 5];

const squareNumbers = numbers.map(number => {
  return number * number;
});

console.log(squareNumbers);

const things = ['desk', 'chair', 5, 'backpack', 3.14, 100];

const onlyNumbers = things.filter(thing => {
  return typeof thing === 'number';
});

console.log(onlyNumbers);






const fruits = ['mango', 'papaya', 'pineapple', 'apple'];

// Iterate over fruits below

fruits.forEach(fruits => console.log(`I want to eat a ${fruits}`))







//MAP METHOD //
const animals = ['Hen', 'elephant', 'llama', 'leopard', 'ostrich', 'Whale', 'octopus', 'rabbit', 'lion', 'dog'];

// Create the secretMessage array below
const secretMessage = animals.map(animals => animals[0]);

console.log(secretMessage.join(''));

const bigNumbers = [100, 200, 300, 400, 500];

// Create the smallNumbers array below
const smallNumbers = bigNumbers.map(bigNumbers => bigNumbers/100)







// FILTER METHOD // 
const randomNumbers = [375, 200, 3.14, 7, 13, 852];

// Call .filter() on randomNumbers below
const smallNumbers = randomNumbers.filter(num => {
  return num < 250;
})

const favoriteWords = ['nostalgia', 'hyperbole', 'fervent', 'esoteric', 'serene'];


// Call .filter() on favoriteWords below

const longFavoriteWords = favoriteWords.filter(word => {
  return word.length > 7;
})







// The .findIndex() Method
const animals = ['hippo', 'tiger', 'lion', 'seal', 'cheetah', 'monkey', 'salamander', 'elephant'];

const foundAnimal = animals.findIndex(animal => {
  return animal === 'elephant';
});

const startsWithS = animals.findIndex(animal => {
  return animal[0] === 's' //animal[0] looks at the first letter of each animal
})





//The .reduce() Method
const newNumbers = [1, 3, 5, 7];

const newSum = newNumbers.reduce((accumulator, currentValue) => {
  console.log('The value of accumulator: ', accumulator);
  console.log('The value of currentValue: ', currentValue);
  return accumulator + currentValue;
}, 10);

console.log(newSum);





//SOME STUFF I DONT EVEN KNOW WHATS GOING ON 
const words = ['unique', 'uncanny', 'pique', 'oxymoron', 'guise'];

// Something is missing in the method call below

console.log(words.some((word) => {
  return word.length < 6;
}));

// Use filter to create a new array
const interestingWords = words.filter(words => { return words.length > 5})


// Make sure to uncomment the code below and fix the incorrect code before running it

console.log(interestingWords.every((word) => { return word.length > 5 }));






// REVIEW OVER MULTIPLE METHODS


const cities = ['Orlando', 'Dubai', 'Edinburgh', 'Chennai', 'Accra', 'Denver', 'Eskisehir', 'Medellin', 'Yokohama'];

const nums = [1, 50, 75, 200, 350, 525, 1000];

//  Choose a method that will return undefined
cities.forEach(city => console.log('Have you visited ' + city + '?'));

// Choose a method that will return a new array
const longCities = cities.filter(city => city.length > 7);

// Choose a method that will return a single value
const word = cities.reduce((acc, currVal) => {
  return acc + currVal[0]
}, "C");

console.log(word)

// Choose a method that will return a new array
const smallerNums = nums.map(num => num - 5);

// Choose a method that will return a boolean value
nums.every(num => num < 0);




// THE SOME METHOD RETURNS BOOLEAN VALUE
// Calling .every() on an existing array returns a boolean value.

function isSumBigger(number1, number2, total) {
    sum = number1 + number2,
    (sum > total)  ? true : false; }
  
  // Should return true
  console.log('isSumBigger(1, 3, 2) returns: ' + isSumBigger(1, 3, 2));
  
  // Should return false
  console.log('isSumBigger(1, 3, 5) returns: ' + isSumBigger(1, 3, 5));




  // EXAMPLE OF USING ARRAYS AND FOR LOOPS

  const reverseArray = arr => {
    let reversed = [];
    for (let i = arr.length - 1; i >= 0; i--) {
        reversed.push(arr[i]);
    }
    return reversed
}
/*
// Alternate solutions:

// Using the .unshift() method
const reverseArray = arr => {
    let reversed = [];
    for (let i = 0; i < arr.length; i++) {
        reversed.unshift(arr[i]);
    }
    return reversed
}

// As a function declaration:
function reverseArray(arr) {
    let reversed = [];
    for (let i = arr.length - 1; i >= 0; i--) {
        reversed.push(arr[i]);
    }
    return reversed
}
*/

const sentence = ['sense.','make', 'all', 'will', 'This'];

console.log(reverseArray(sentence)); 



//THIS IS THE FOR LOOP - CREATING ANOTHER ARRAY


// Write your code here:

const convertToBaby = animals => { 
    const babyAnimals = [];
       for (let i = 0; i < animals.length; i++) {
             babyAnimals.push('baby ' + animals[i]);
       }
       return babyAnimals } 
 
 
 
 
 
 
 // When you're ready to test your code, uncomment the below and run:
 
 const animals = ['panda', 'turtle', 'giraffe', 'hippo', 'sloth', 'human'];
 
 console.log(convertToBaby(animals)) 
 
 






// TYPE OF FOR AND WHILE LOOPS
const numbers = [5, 3, 9, 30];

const smallestPowerOfTwo = arr => {
      let results = [];
// The 'outer' for loop - loops through each element in the array
      
      for (let i = 0; i < arr.length; i++) {
            number = arr[i];

// The 'inner' while loop - searches for smallest power of 2 greater than the given number
            j = 1;
            while (j < number) {
                  j = j * 2;
            }
            results.push(j);
      }
      return results
}

console.log(smallestPowerOfTwo(numbers)) 
// Should print the returned array [ 8, 4, 16, 32 ] instead prints the returned array [8]